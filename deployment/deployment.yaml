# Namespace para frontend
apiVersion: v1
kind: Namespace
metadata:
  name: frontend-ns
---
# Namespace para auth-api
apiVersion: v1
kind: Namespace
metadata:
  name: auth-ns
---
# Namespace para todos-api
apiVersion: v1
kind: Namespace
metadata:
  name: todos-ns
---
# Namespace para users-api
apiVersion: v1
kind: Namespace
metadata:
  name: users-ns
---
# Namespace para redis
apiVersion: v1
kind: Namespace
metadata:
  name: redis-ns
---
# Namespace para log-message-processor
apiVersion: v1
kind: Namespace
metadata:
  name: log-ns
---
# Deployment con RollingUpdate (frontend)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: frontend-ns
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: juaca2004/frontendmicroservice:latest
          ports:
            - containerPort: 8080
          env:
            - name: AUTH_API_ADDRESS
              value: "http://auth-api.auth-ns.svc.cluster.local:8000"
            - name: TODOS_API_ADDRESS
              value: "http://todos-api.todos-ns.svc.cluster.local:8082"
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "250m"
              memory: "256Mi"
---
# Service para frontend
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: frontend-ns
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: ClusterIP
---
# HPA para frontend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
  namespace: frontend-ns
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 2
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50
---
# Deployment con Recreate (auth-api)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-api
  namespace: auth-ns
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: auth-api
  template:
    metadata:
      labels:
        app: auth-api
    spec:
      containers:
        - name: auth-api
          image: juaca2004/authapi:latest
          ports:
            - containerPort: 8000
          env:
            - name: AUTH_API_PORT
              value: "8000"
            - name: USERS_API_ADDRESS
              value: "http://users-api.users-ns.svc.cluster.local:8083"
            - name: JWT_SECRET
              value: "myfancysecret"
---
# Service para auth-api
apiVersion: v1
kind: Service
metadata:
  name: auth-api
  namespace: auth-ns
spec:
  selector:
    app: auth-api
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
  type: ClusterIP
---
# Deployment para todos-api
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todos-api
  namespace: todos-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: todos-api
  template:
    metadata:
      labels:
        app: todos-api
    spec:
      containers:
        - name: todos-api
          image: juaca2004/todosapi:latest
          ports:
            - containerPort: 8082
          env:
            - name: TODO_API_PORT
              value: "8082"
            - name: JWT_SECRET
              value: "myfancysecret"
            - name: REDIS_HOST
              value: "redis.redis-ns.svc.cluster.local"
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_CHANNEL
              value: "log_channel"
---
# Service para todos-api
apiVersion: v1
kind: Service
metadata:
  name: todos-api
  namespace: todos-ns
spec:
  selector:
    app: todos-api
  ports:
    - protocol: TCP
      port: 8082
      targetPort: 8082
  type: ClusterIP
---
# Deployment para users-api
apiVersion: apps/v1
kind: Deployment
metadata:
  name: users-api
  namespace: users-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: users-api
  template:
    metadata:
      labels:
        app: users-api
    spec:
      containers:
        - name: users-api
          image: juaca2004/userapi:latest
          ports:
            - containerPort: 8083
          env:
            - name: JWT_SECRET
              value: "myfancysecret"
            - name: SERVER_PORT
              value: "8083"
---
# Service para users-api
apiVersion: v1
kind: Service
metadata:
  name: users-api
  namespace: users-ns
spec:
  selector:
    app: users-api
  ports:
    - protocol: TCP
      port: 8083
      targetPort: 8083
  type: ClusterIP
---
# Deployment para log-message-processor
apiVersion: apps/v1
kind: Deployment
metadata:
  name: log-message-processor
  namespace: log-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: log-message-processor
  template:
    metadata:
      labels:
        app: log-message-processor
    spec:
      containers:
        - name: log-message-processor
          image: juaca2004/logmessageprocessor:latest
          env:
            - name: REDIS_HOST
              value: "redis.redis-ns.svc.cluster.local"
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_CHANNEL
              value: "log_channel"
---
# Deployment para Redis
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: redis-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7.0
          ports:
            - containerPort: 6379
---
# Service para Redis
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: redis-ns
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  type: ClusterIP


---
# üîí Default deny para todos los namespaces
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: frontend-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: auth-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: users-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: todos-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: redis-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: log-ns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
# üåê Permitir tr√°fico de Internet al frontend
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend-allow-ingress
  namespace: frontend-ns
spec:
  podSelector:
    matchLabels:
      app: frontend
  policyTypes:
  - Ingress
  ingress:
  - from:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - protocol: TCP
      port: 8080
---
# üåê Egress desde frontend hacia auth y todos + DNS
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend-allow-egress
  namespace: frontend-ns
spec:
  podSelector:
    matchLabels:
      app: frontend
  policyTypes:
  - Egress
  egress:
  # DNS
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # auth-api
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: auth-ns
      podSelector:
        matchLabels:
          app: auth-api
    ports:
    - protocol: TCP
      port: 8000
  # todos-api
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: todos-ns
      podSelector:
        matchLabels:
          app: todos-api
    ports:
    - protocol: TCP
      port: 8082
---
# üîê auth-api permite ingreso solo desde frontend y egreso solo hacia users-api + DNS
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: auth-api-allow-ingress
  namespace: auth-ns
spec:
  podSelector:
    matchLabels:
      app: auth-api
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: frontend-ns
      podSelector:
        matchLabels:
          app: frontend
    ports:
    - protocol: TCP
      port: 8000
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: auth-api-allow-egress
  namespace: auth-ns
spec:
  podSelector:
    matchLabels:
      app: auth-api
  policyTypes:
  - Egress
  egress:
  # DNS
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
  # users-api
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: users-ns
      podSelector:
        matchLabels:
          app: users-api
    ports:
    - protocol: TCP
      port: 8083
---
# üë• users-api permite solo conexi√≥n desde auth-api
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: users-api-allow-ingress
  namespace: users-ns
spec:
  podSelector:
    matchLabels:
      app: users-api
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: auth-ns
      podSelector:
        matchLabels:
          app: auth-api
    ports:
    - protocol: TCP
      port: 8083
---
# üìù todos-api solo permite tr√°fico desde frontend
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: todos-api-allow-ingress
  namespace: todos-ns
spec:
  podSelector:
    matchLabels:
      app: todos-api
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: frontend-ns
      podSelector:
        matchLabels:
          app: frontend
    ports:
    - protocol: TCP
      port: 8082
---
# üíæ Redis permite ingreso desde todos-api y log-processor
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-allow-ingress
  namespace: redis-ns
spec:
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: todos-ns
      podSelector:
        matchLabels:
          app: todos-api
    ports:
    - protocol: TCP
      port: 6379
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: log-ns
      podSelector:
        matchLabels:
          app: log-message-processor
    ports:
    - protocol: TCP
      port: 6379
---
# üßæ Log-message-processor puede salir hacia Redis y DNS
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: log-egress-redis
  namespace: log-ns
spec:
  podSelector:
    matchLabels:
      app: log-message-processor
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: redis-ns
      podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

